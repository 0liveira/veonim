render offline/background for multi neovim instances
  - have method with unpipe/pipe and clear+resize to switch vim instances
  the question though: 
    node integration shares the same UI thread. so expensive ops will block UI.
    that would be unfortunate as it would be the same as vim (no gui/async advantage). 
    so expensive ops should go into another thread/process. Options (ranked in probable order of speed):
      - web worker with node integration - use postmessage(obj) (via clonining) to pass stdout/stdin to ui
      - other renderer process - use ipc
      - other processes - use sockets

    the problem is that plugins need access to neovim instance to talk to it. aka access to stdout/stdin
    so out/in needs to live outside of UI thread
    or... ui -> plugins thread -> ui.neovim -> plugins thread -> ui (seems expensive)
    instead: IO/plugins thread <-> UI
      - disadvantges - increased latency as data has to be copied between threads (transferrable not great for POJO)
      - advantages - move as much as possible out of UI thread to not block ui
        - allow to scale to n+ threads in the future if needed (maybe IO thread should be on its own, so rendering/input paths get clear passthru to UI thread)

  "nno dj /\S<cr>:noh<cr>0d``==
  "nno dk ?\S<cr>:noh<cr>jd``==



-- later
setup electron build/package and publish to npm - have release + dev builds at the same time on machine
  just copy local to another folder and create alias to it - create wrapper to override env_vars
hot reload/plain ole' reload on change/
  run tsc on watch. manually reload

chokidar file reload vim buffers

-- maybe
KARABINER: FIX SHIFT;;;;;;;
can we replace kr-el for semi maps? (since we have key down/up events)
fix rendering glitches when typing? are we rounding somwhere or losing precision in calculations?
perf improvements?

consider using canvas cursor to do better blend with vim canvas (what about cursor for inputs?)
https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
https://github.com/Phrogz/context-blender
actually - could get char from canvas at x/y (under cursor) and then render it in the cursor el but inverted (if block cursor)


-- tried, failed, gave up
preload vim with autocmd and global var - setting --cmd but not taking effect. try simple example to start nvim from node script and see if it works.
support cursor colors - almost there: issue in getting color for id (synIDattr does not return val even in nvim)
