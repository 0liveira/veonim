remove react-redux dependency when removing dedox
react-tiny-virtual-list for virtual lists?

explorer:
don't auto select (active: ix === $.ix) an item in the list unless we have focus
redo home, next, prev keybinds for explorer to not use ctrl + hjkl
figure out better name for embed custom render buffers
generalize embed buffers to support any components
figure out how to swap between different embed components (get buffer name?)
can we support multiple embed components, one per each buffer instance? or shared?
nameplate title changes on window change

SHADOW BUFFER ARCH DESIGN --

function to register a function that will create new instances of embed
components. right now we assume only one instance, but allow the possibility
of multiple instances in the future

global method registerShadowComponent(() => {
  name: string,
  element: HTMLElement,
  onFocus: Function,
  onBlur: Function,
  onShow: Function,
  onHide: Function,
  // maybe?
  // onActivate: Function,
})

each embed component module will self-register. this works like neovim.action() - in that
i would prefer the component to manage registration on init instead of some 3rd party
module that has to keep track of all components and register them


should embed components be generated once, then onShow/onHide when they appear in the
window grid, or should they be generated every time they appear in the windows, and
self-destruct when buffer closed?

could be expensive to recreate and destroy all the time. at the same time it could be memory
intensive to keep around a bunch of component elements.

also, if we decide to list shadow buffers in the buffer list (currently: yes) then how
could we list multiple without confusion?

i think the most viable plan of attack is to requireDir(../components).then(() => {
  const shadowBuffers = new Map()
  registeredShadowComponents.forEach(initFn => {
    const { name, ...stuff } = initFn()
    shadowBuffers.set(name, stuff)
    createShadowBuffer(name)
  })
})

and later in windows.ts

// another map here to track current active shadow buffers
// might get messy to track active in `shadowBuffers`
// also keep this win stuff localized to this module, instead of
// muddying the global store (which should be immutable after initial
// app load - unless we plan to dynamically load components at
// runtime in the future?)
const activeShadowBuffers = new Map()

neovim.on.bufUnload(s => {
  if (!activeShadowBuffers.has(s.name)) return

  const win = activeShadowBuffers.get(s.name)
  // use an attribute to denote shadow buffer type?
  win.canvasBox.remove(shadowBufferElement)
  win.canvas.style.display = 'block'
  activeShadowBuffers.delete(s.name)
})

if (vm.filetype === 'shadow-buffer') {
  const shabuf = shadowBuffers.get(vm.name)
  if (!shabuf) return
  canvas.style.display = 'none'
  win.canvasBox.appendChild(shabuf.element)
  activeShadowBuffers.add(vm.name, win)
} else {
  // somehow remove the shadow buffer element. not good enough! because we could
  // have multiple shadow buffers

  // maybe use bufUnload? how would that work...
  win.canvasBox.remove(shabuf.element)
}

--

should probably stop auto adjusting windows with (wincmd =)
  this is immediatly obvious now with non-equal width windows (embed explorer)
  can we be smarter about this? maybe figure out widths before resize grid?
  only apply wincmd = in certain conditions?

check on the background of embed explorer, not sure it's the exact same bg color as vim.bg
- using digital color meter.app it is confirmed that the colors are slightly
  off. i checked the logic for setting background is being set correct. in
  fact, when i took the exact bg color specified in the colorscheme.vim and
  applied it directly to the element background color, the subtle color
  difference still persisted. i wonder if the color convert for canvas is doing
  something slightly off. or perhaps html divs have some sort of color profile
  applied but canvas do not...

rpc errors send to notifications? (try calling some broken execute() vimscript from usermenu)

new react overlay menus are not centered...

create demo script to start electron at a certain size
open various features
use electron/spectron screenshot feature
save to docs

--ideas--

set process.env.XDG_CONFIG_HOME in dev to use alt vim/extensions folders when testing dev that do not conflict with release builds

constrain overlay menus to a particular window (current window)
  - i.e. show symbol/file menu on top of the current buffer window, instead of the center of the program,
    since selecting a symbol or file will make changes in the current window, not globally
start splash screen include MRU projects
easymotion jump to highlighted word
buffer-search should only search in the current viewport. no scrolling pls
create fuzzy search for entire buffer, but use popup menu
terminal change title to current running process
backfill problems into quickfix list

:: try with new floating windows api for this? then it can all be supported in vimscript

press and hold mark ' keybind to bring up menu of current global marks
menu lists something like
a - support.ts
s - utils.ts
d - main.ts

pressing one of the keys takes you to that file
releasing mark keybind closes menu without any navigation
(think kinda like opie addon, but hold activate)
